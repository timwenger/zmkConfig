/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * Edited by Tim Wenger
 * This is the 2L-COLEMAK branch
 * 
 *
 */
 
 /*                KEY POSITIONS

   -------------------------    -------------------------
  | x0   1   2   3   4    5 | |  6   7   8   9  10  x11  |
  |x12  13  14  15  16   17 | | 18  19  20  21  22  x23  |
  |x24  25  26  27  28   29 | | 30  31  32  33  34  x35  |
   -----------  36  37  x38 | |x39  40   41  ------------
               -------------   -------------            */



#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define L0      0
#define L1      1
#define BTL     2

// defines for more compact combo syntax

#define COMBO(NAME, TIMEOUT, KEYPOS, BINDINGS) \
  combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    key-positions = <KEYPOS>; \
	bindings = <BINDINGS>; \
  };
  

&lt {
    tapping-term-ms = <250>;
    quick_tap_ms = <180>;

};

/ {	
	behaviors {
	
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		
		qem: question_exclamation_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION_MORPH";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCLAMATION>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		
	};
	
	
    combos {
	   compatible = "zmk,combos";
		
	   
	   // left hand general
	   
	   COMBO(pg_dn,            50,  2  3, &kp PG_DN)
	   COMBO(pg_up,            50,  3  4, &kp PG_UP)
	   COMBO(screenshot,       50,  4  5, &kp PRINTSCREEN)
	   COMBO(cntxt_menu,       50, 28 29, &kp K_CONTEXT_MENU)
	   COMBO(bar,              50,  2 14, &kp PIPE)                // vertical
	   COMBO(back_slash,       50,  3 15, &kp BSLH)                // vertical
	   COMBO(fwd_slash,        50,  4 16, &kp FSLH)                // vertical
	   
	   
	   // right hand general
	   
	   COMBO(quotes,           50,  8  9, &kp APOSTROPHE)
	   COMBO(semi_colon,       50, 32 33, &kp SEMICOLON)	  
	  
	   
	   // backspace, delete, enter
	   
	   COMBO(backspace,        50, 14 15, &kp BSPC)
	   COMBO(delete,           50, 26 27, &kp DELETE)
	   COMBO(enter,            50, 20 21, &kp ENTER)		   
	   
	   
	   // brackets
	   
	   COMBO(l_square_bracket, 50,  2  4, &kp LBKT)
	   COMBO(r_square_bracket, 50,  7  9, &kp RBKT)
	   COMBO(l_paren,          50, 14 16, &kp LPAR)
	   COMBO(r_paren,          50, 19 21, &kp RPAR)
	   COMBO(l_brace,          50, 26 28, &kp LBRC)
	   COMBO(r_brace,          50, 31 33, &kp RBRC)
	   
	   
	   // for math
	   
	   COMBO(equals_plus,      50,  7  8, &kp EQUAL)
	   COMBO(minus_underscore, 50, 31 32, &kp MINUS)
	   COMBO(multiply,         50,  6  7, &kp ASTERISK)
	   COMBO(divide,           50, 30 31, &kp SLASH)
	   
	   
	   // numbers row
	   // can have a high timeout, since it's unlikely to press both vertical keys rapidly with the same finger
	   	   
	   COMBO(num_one,         250, 13 25, &kp N1)                // vertical
	   COMBO(num_two,         150, 14 26, &kp N2)                // vertical
	   COMBO(num_three,       150, 15 27, &kp N3)                // vertical
	   COMBO(num_four,        150, 16 28, &kp N4)                // vertical
	   COMBO(num_five,        150, 17 29, &kp N5)                // vertical
	   COMBO(num_six,         150, 18 30, &kp N6)                // vertical
	   COMBO(num_seven,       150, 19 31, &kp N7)                // vertical
	   COMBO(num_eight,       150, 20 32, &kp N8)                // vertical
	   COMBO(num_nine,        150, 21 33, &kp N9)                // vertical
	   COMBO(num_zero,        250, 22 34, &kp N0)                // vertical
	   

       // tab / app / desktop switching
	   
	   COMBO(move_tab_right,   50, 18 19, &kp LC(TAB))
	   COMBO(move_tab_left,    50, 16 17, &kp LC(LS(TAB)))
	   
	   COMBO(choose_apps,      50, 37 40, &kp LC(LA(TAB)))
	   COMBO(task_view,        50, 36 41, &kp LG(TAB))
	   
	   COMBO(move_dsktp_left,  50, 36 37, &kp LG(LC(LEFT)))
	   COMBO(move_dsktp_right, 50, 40 41, &kp LG(LC(RIGHT)))
	   
	   COMBO(close_window,     50,  2  3  4, &kp LA(F4))
	   COMBO(task_mgmt,        50, 26 27 28, &kp LC(LS(ESC)))

 
	};
	
    keymap {
        compatible = "zmk,keymap";
        layer_0 {
         
            bindings = <
                &none       &kp Q         &kp W         &kp F          &kp P           &kp G                 &kp J         &kp L          &kp U         &kp Y           &gresc          &none
                &none       &kp A         &hm LWIN R    &hm LALT S     &hm LCTRL T     &kp D                 &kp H         &hm RCTRL N    &hm RALT E    &hm RWIN I      &lt L1 O        &none
                &none       &lt L1 Z      &kp X         &kp C          &kp V           &kp B                 &kp K         &kp M          &kp COMMA     &kp DOT         &qem            &none
                                                        &kp TAB        &kp LSHFT       &none                 &none         &kp RSHFT      &kp SPACE
            >; 
        };
    	
        layer_1 {
            
    		bindings = <
			    &none       &none         &kp RC(INS)   &kp UP         &kp RS(INS)     &none                 &kp F12       &kp F7         &kp F8        &kp F9          &gresc          &none
                &none       &kp HOME      &kp LEFT      &kp DOWN       &kp RIGHT       &kp END               &kp F11       &hm RCTRL F4   &hm RALT F5   &hm RWIN F6     &mo BTL         &none
                &none       &mo BTL       &kp RC(X)     &kp RC(C)      &kp RC(V)       &none                 &kp F10       &kp F1         &kp F2        &kp F3          &none           &none
                                                        &kp TAB        &kp LSHFT       &none                 &none         &kp RSHFT      &kp SPACE
            >;
        };
    
	bluetooth_layer {

    		bindings = <
                &none       &none         &bt BT_CLR    &out OUT_USB   &out OUT_BLE    &none                 &reset        &none          &none         &none           &none           &none
                &none       &none         &bt BT_SEL 2  &bt BT_SEL 1   &bt BT_SEL 0    &none                 &none         &none          &none         &none           &none           &none
                &none       &none         &none         &bt BT_SEL 4   &bt BT_SEL 3    &none                 &bootloader   &none          &none         &none           &none           &none
                                                        &none          &none           &none                 &none         &none          &none
            >;
        };
    };
};
